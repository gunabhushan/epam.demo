git init
git config --global user.name
git config --global user.email
git clone url
git remote -v
git remote origin url
git status
git add
git commit
git commit --amend
git push
git gui&
gitk&
git log
head point to the last commit
commit, tree, blob(binary large object)
git show -s --pretty=raw commit_reference

Working directory
git checkout -- filename.ext
git checkout .
git clean -xdf

staging area (index)
git reset --file.ext

local branch
git reset HEAD~(number of commits you want to roll back)

git reset --soft HEAD~
git reset --mixed HEAD~
git reset --hard HEAD~

git revert nameOfTheHashCode

.gitignore is used to mention all the files that need to be ignored by the git

----Branching-----
git checkout -b branch_name
git checkout branch_name
git merge branch_name

conflict resolution in git
abort merge
git merge --abort

resolve by selecting version
git checkout --Xours --Xtheirs

resolve manually
git diff

undo merge
git revert shacode

--Rebase--
it is used to restructure the nodes

--Cherry-pick--
The operation of copying a commit to a new place is called cherry pick.
It cherry pick can allow any pick from any branch and allow us to keep it in any other branch

--Tags--
A tag is a small, compact, short text marker that can be used to mark a commit. It is used to decorate a commit, it is not a commit. We can use tags instead of shacodes to reference commits.

Mark a commit with a tag
git tag tag_name

View tags
git tag -list

Only push tags to the repo
git push --tags

Check out the tag
git checkout tag_name

--Stashing--
The main idea at the basis of stashing is the capability to save our work, which has not been committed yet and is not ready for commiting, somewhere in a temporary storage.

Save to stash
git stash save "discription"

View stashes
git stash list

Bring stashes back
git stash pop stash_name
git stash apply stash_name

Remove stash
git stash drop
